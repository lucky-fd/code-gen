package ${packageName}.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;

import lombok.extern.slf4j.Slf4j;
import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import ${packageName}.domain.${ClassName};
import ${packageName}.domain.vo.${ClassName}ReqVo;
import ${packageName}.service.I${ClassName}Service;
import com.yuanchen.bigdata.longna.common.bean.result.Response;
#if($table.crud || $table.sub)
import com.yuanchen.bigdata.longna.common.bean.page.PageEntity;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@RestController
@RequestMapping("/${businessName}")
@RequiredArgsConstructor
@Api(value = "${functionName}", tags = "${functionName}")
public class ${ClassName}Controller {

    private final I${ClassName}Service ${className}Service;


    /**
     * 查询列表
     * @param ${className} 查询条件
     * @return 分页信息
     */
    @GetMapping("/list")
    @ApiOperation(value = "${functionName}列表查询【${author}】",
            notes = "${functionName}列表查询", produces = "创建人：【${author}】", consumes = "关注人：【xxx】")
    public PageEntity list(${ClassName}ReqVo ${className}) {
        startPage();
        return getPageEntity(${className}Service.select${ClassName}List(${className}));
    }


    /**
     * 获取详细信息
     * @param ${pkColumn.javaField} id
     */
    @GetMapping(value = "/getById/{${pkColumn.javaField}}")
    @ApiOperation(value = "${functionName} id查询【${author}】",
            notes = "${functionName} id查询", produces = "创建人：【${author}】", consumes = "关注人：【xxx】")
    public Response< ${ClassName}RespVo> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return Response.success(${className}Service.selectBy${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 新增
     * @param ${className} 新增内容
     */
    @PostMapping("/save")
    @ApiOperation(value = "${functionName} 新增或修改【${author}】",
            notes = "${functionName} 新增或修改", produces = "创建人：【${author}】", consumes = "关注人：【xxx】")
    public Response<?> save(@RequestBody ${ClassName} ${className}) {
        ${className}Service.saveOrUpdate(${className});
        return Response.success();
    }

    /**
     * 新增
     * @param ${className} 新增内容
     */
    @PostMapping("/saveBatch")
    public Response<?> saveBatch(@RequestBody List<${ClassName}> ${className}) {
        ${className}Service.saveBatch(${className});
        return Response.success();
    }

    /**
     * 删除
     */
    @PostMapping("/delete")
    @ApiOperation(value = "${functionName} 删除【${author}】",
            notes = "${functionName} 删除", produces = "创建人：【${author}】", consumes = "关注人：【xxx】")
    public Response<?> remove(@RequestBody List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        ${className}Service.removeBatchByIds(${pkColumn.javaField}s);
        return Response.success();
    }

}
