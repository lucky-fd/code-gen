package ${packageName}.service.impl;

import java.util.List;


import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
#if($isProcess)
import io.seata.spring.annotation.GlobalTransactional;
import com.ci.erp.common.process.enums.EmCommonProcessStatus;
import org.apache.commons.collections.CollectionUtils;
import com.ci.erp.common.core.constant.ProcessConstants;
import com.ci.erp.common.core.exception.ServiceException;
import com.ci.erp.common.core.utils.StringUtils;
import com.ci.erp.common.core.enums.ResCode;

import static com.ci.erp.api.process.domain.dto.ProcessCommitReqDto.*;
import static com.ci.erp.common.process.constant.ProcessConstant.*;
#end
#if($table.sub)
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @since  ${datetime}
 */
@Slf4j
@Service
public class ${ClassName}ServiceImpl extends ServiceImplPlus<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service {

    @Override
    public ${ClassName}RespVo select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName} entity = baseMapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
        return ${ClassName}Convert.INSTANCE.convert(entity);
    }

    @Override
    public  List<${ClassName}RespVo> select${ClassName}List(${ClassName}ReqVo ${className}) {
        List<${ClassName}> list = baseMapper.select${ClassName}List(${className});
        return ${ClassName}Convert.INSTANCE.convertVoBatch(list);
    }

    @Override
    public void export(${ClassName}ReqVo ${className}, HttpServletResponse response) {
        List<${ClassName}> list;
        //选择订单导出
        if (${className}.getIncludeIds().size() > 0){
            //查询出需要导出的数据
            ${ClassName} selectList = new ${ClassName}();
            selectList.setIncludeIds(${className}.getIncludeIds());

        }else{//条件查询导出
            //排掉前端的勾选列表
            ${className}.setIncludeIds(null);
        }
        list = baseMapper.select${ClassName}List(${className});
        List<${ClassName}RespVo> resp = ${ClassName}Convert.INSTANCE.convertVoBatch(list);
        ExcelUtil<${ClassName}RespVo> util = new ExcelUtil<>(${ClassName}RespVo.class);
        util.exportExcel(response, resp, "导出模板信息");
    }

}
