package ${packageName}.service.impl;

import com.alibaba.boot.hsf.annotation.HSFProvider;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.pinuc.online.common.lambda.Fields;
import com.pinuc.online.common.entity.model.QueryModel;
import com.pinuc.online.core.entity.response.Page;
import com.pinuc.online.mybatispgsql.service.DefaultPoJoService;
import java.lang.reflect.Field;
import java.util.List;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;

/**
 * ${functionName} Service业务层处理
 *
 * @author ${author}
 * @since  ${datetime}
 */
@Slf4j
@HSFProvider(serviceInterface = ${ClassName}Service.class)
public class ${ClassName}ServiceImpl extends DefaultPoJoService<${ClassName}PoJoModel, ${ClassName}, ${ClassName}Mapper> implements ${ClassName}Service {

    @Override
    protected Class<${ClassName}PoJoModel> getPoJoModelClass() {
        return ${ClassName}PoJoModel.class;
    }

    @Nonnull
    @Override
    public <REQ extends QueryModel> List<${ClassName}PoJoModel> list(
            REQ req, Fields<${ClassName}PoJoModel> fields) {
        if (req instanceof Query${ClassName}Model) {
            return list((Query${ClassName}Model) req, fields);
        }
        return super.list(req, fields);
    }

    @Nonnull
    @Override
    public <REQ extends QueryModel> Page<${ClassName}PoJoModel> page(
            long page, long size, REQ req, Fields<${ClassName}PoJoModel> fields) {
        if (req instanceof Query${ClassName}Model) {

            // 构建查询条件
            QueryWrapper<${ClassName}> queryWrapper = buildWrapper((Query${ClassName}Model)req, fields);

            IPage<${ClassName}> pageInfo =
                    new com.baomidou.mybatisplus.extension.plugins.pagination.Page<>(page, size);
            IPage<${ClassName}> iPage = page(pageInfo, queryWrapper);
            return Page.of(
                    iPage.getCurrent(),
                    iPage.getSize(),
                    iPage.getTotal(),
                    iPage.getRecords().stream()
                            .map(o -> o.toModel(${ClassName}PoJoModel.class))
                            .collect(Collectors.toList()));
        }
        return super.page(page, size, req, fields);
    }

    /** {@inheritDoc} */
    @Nonnull
    @Override
    public List<${ClassName}PoJoModel> list(
            Query${ClassName}Model req, Fields<${ClassName}PoJoModel> fields) {

        // 构建查询条件
        QueryWrapper<${ClassName}> queryWrapper = buildWrapper(req, fields);

        return baseMapper.selectList(queryWrapper).stream()
                .map(pojo -> pojo.toModel(${ClassName}PoJoModel.class))
                .collect(Collectors.toList());
    }

    /** 构建查询条件 */
    private QueryWrapper<${ClassName}> buildWrapper(
            Query${ClassName}Model queryModel, Fields<${ClassName}PoJoModel> fields) {
        QueryWrapper<${ClassName}> wrapper = new QueryWrapper<>();
        // 查询条件

        // 逻辑删除
        wrapper.eq(getColumn(BeanUtils.getField(${ClassName}::getDeleted)), false);

        // 指定查询字段
        if (fields != null) {
            wrapper.select(
                    fields.getIncludeFields().stream().map(this::getColumn).collect(Collectors.toList()));
        }
        // 排序
        wrapper.orderByDesc("create_time");
        return wrapper;
    }


}
