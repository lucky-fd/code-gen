package ${packageName}.controller;

import javax.annotation.Resource;
import javax.validation.Valid;

import com.pinuc.online.common.lambda.Fields;
import com.pinuc.online.core.entity.response.Page;
import com.pinuc.online.core.entity.response.Rs;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import org.apache.commons.collections.CollectionUtils;

import java.util.List;

/**
 * ${functionName}
 *
 * @author ${author}
 * @since ${datetime}
 */
@Slf4j
@RestController
@RequestMapping("/${businessName}")
public class ${ClassName}Controller {

    @Resource
    private ${ClassName}Service ${className}Service;

    /**
     * 新增
     *
     * @ignoreParams currentUser
     * @author ${author}
     * @since ${datetime}
     */
    @PostMapping("/create")
    public Rs<${ClassName}Resp> create(@RequestBody @Valid ${ClassName}Req ${className}, @AccountContext CurrentUser currentUser) {
            ${ClassName}PoJoModel poJoModel = ${className}.toModel();
        poJoModel.setCreateBy(currentUser.getName());
        poJoModel.setCreateAccountId(currentUser.getId());
        poJoModel.setUpdateBy(currentUser.getName());
        poJoModel.setUpdateAccountId(currentUser.getId());
        return Rs.ok(${ClassName}Resp.of(${className}Service.create(poJoModel)));
    }

    /**
     * 获取详细信息
     * @author ${author}
     * @since ${datetime}
     */
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public Rs<${ClassName}Resp> detail(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return Rs.ok(${ClassName}Resp.of(${className}Service.getById(${pkColumn.javaField})));
    }

    /**
     * 查询列表
     * @author ${author}
     * @since ${datetime}
     * @return 列表信息
     */
    @GetMapping("/list")
    public Rs<List<${ClassName}Resp>> list(${ClassName}QueryReq ${className}) {
        List<${ClassName}PoJoModel> list = ${className}Service.list(
                Query${ClassName}Model.builder()
                        .build(),
                Fields.of(${ClassName}PoJoModel.class));
        return Rs.ok(${ClassName}Resp.ofList(list));
    }


    /**
     * 分页查询
     *
     * @author ${author}
     * @since ${datetime}
     * @return 分页信息
     */
    @GetMapping("/page")
    public Rs<Page<${ClassName}Resp>> page(@Valid ${ClassName}PageReq ${className}) {
        Page<${ClassName}PoJoModel> page = ${className}Service.page(
            ${className}.getPage(),
        ${className}.getSize(),
                Query${ClassName}Model.builder()
                        .build(),
                Fields.of(${ClassName}PoJoModel.class));

        return Rs.ok(
                Page.of(
                        page.getPageNo(),
                        page.getPageSize(),
                        page.getTotalCount(),
                            ${ClassName}Resp.ofList(page.getList())));
    }

    /**
     * 更新
     *
     * @ignoreParams currentUser
     * @author ${author}
     * @since ${datetime}
     */
    @PostMapping("/update")
    public Rs<${ClassName}Resp> update(@RequestBody @Valid ${ClassName}Req ${className}, @AccountContext CurrentUser currentUser) {
            ${ClassName}PoJoModel poJoModel = ${className}.toModel();
        poJoModel.setUpdateBy(currentUser.getName());
        poJoModel.setUpdateAccountId(currentUser.getId());
        return Rs.ok(${ClassName}Resp.of(${className}Service.update(poJoModel)));
    }


    /**
     * 单个/批量删除
     * @author ${author}
     * @since ${datetime}
     */
    @PostMapping("/delete")
    public Rs<Void> remove(@RequestBody List<Long> ids) {
        if (CollectionUtils.isEmpty(ids)) {
            return Rs.failMsg("操作失败，请选择要删除的数据！");
        }
            ${className}Service.deleteByIds(ids);
        return Rs.ok();
    }

}
